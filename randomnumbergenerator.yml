AWSTemplateFormatVersion: "2010-09-09"
Description: DCSA - Random Number Generator Stack
Resources:
  RandomStringResource:
    Type: Custom::RandomString
    Properties:
      ServiceToken: !GetAtt "RandomStringFunction.Arn"
      Length: "24"

  RandomStringFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 10
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Runtime: python3.6
      Code:
        ZipFile: |
          import cfnresponse
          import boto
          import awscli
          import eksctl
          from random import choice
          from string import ascii_lowercase, digits
          def random_string(length=24, chars=ascii_lowercase + digits):
            return "".join(choice(chars) for x in range(length))
          def lambda_handler(event, context):
            print(f"Data in event: {event}")
            response_data = {}
            if event["RequestType"] == "Create":
              string_length = int(event["ResourceProperties"]["Length"])
              physicalResourceId = random_string(string_length)
              response_data = { "RandomString": physicalResourceId }
            else: # if event["RequestType"] == "Update" or event["RequestType"] == "Delete":
              physicalResourceId = event["PhysicalResourceId"]
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)

          def create_eks_cluster_with_fargate:
              response_data = {}
              import subprocess
              subprocess.run(["eksctl", "--name fishbone", "--version 1.14", "--region us-east-1", "--fargate"])
            else: # if event["RequestType"] == "Update" or event["RequestType"] == "Delete":
              physicalResourceId = event["PhysicalResourceId"]
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  RandomStringFromRandomStringResource:
    Description: "Name generated by RandomStringResource"
    Value: !GetAtt RandomStringResource.RandomString
  StackName:
    Value: !Ref AWS::StackName
