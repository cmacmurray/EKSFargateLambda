---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Service Role'
Parameters:
  ClusterName:
    Type: String
    Default: 'Fred'
  CertificateArn: ''
Resources:

#NetworkResources

  eksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  eksClusterGeneratorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:*']
                Resource: 'arn:aws:logs:*:*:*'

  eksClusterGenerator:
    Type: AWS::Lambda::Function
    Properties:
     Environment:
       Variables:
         SubnetId0: !Ref ClusterSubnet0
         SubnetId1: !Ref ClusterSubnet1
         SubnetId2: !Ref ClusterSubnet2
         SecurityGroup0
         SecurityGroup1
         SecurityGroup2
     Handler: index.handler
     Runtime: python3.6
     Role: !GetAtt eksClusterGeneratorExecutionRole.Arn
     Code:
      ZipFile: |
        import cfnresponse
        import awscli
        import eksctl
        import boto3
        imoport os

        CLUSTER_SUBNET_0 = os.environ["ClusterSubnet0"]
        CLUSTER_SUBNET_1 = os.environ["ClusterSubnet1"]
        CLUSTER_SUBNET_2 = os.environ["ClusterSubnet2"]
        SECURITY_GROUP0 = os.environ["SecurityGroup0"]
        SECURITY_GROUP1 = os.environ["SecurityGroup1"]
        SECURITY_GROUP2 = os.environ["SecurityGroup2"]

        client = boto3.client('cluster')
 
        response = client.create_cluster(
            name = !Ref ${ClusterName} 
            version = '1.4.9',
            roleArn = 'arn:aws:iam::099454879218:role/EKSFargatLambda-eksServiceRole-6J5HJ7O6VVGT',
            resourcesVpcConfig={
                'subnetIds': [
                    'subnet-0bf57357',
                    'subnet-192b7e53',
                    'subnej-2b1b6424'
                ],
                 'securityGroupIds' : [
                    'sg-dcc5a891'
                    ],
                []
            }
        )
 
Outputs:

  RoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt eksServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleArn"
